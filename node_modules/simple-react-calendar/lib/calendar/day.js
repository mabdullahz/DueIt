'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _consts = require('./consts');

var _lib = require('./_lib');

var _format = require('date-fns/format');

var _format2 = _interopRequireDefault(_format);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Day = function (_React$Component) {
  _inherits(Day, _React$Component);

  function Day() {
    _classCallCheck(this, Day);

    return _possibleConstructorReturn(this, (Day.__proto__ || Object.getPrototypeOf(Day)).apply(this, arguments));
  }

  _createClass(Day, [{
    key: '_onClick',
    value: function _onClick(e) {
      e.preventDefault();
      var _props = this.props,
          date = _props.date,
          onClick = _props.onClick;

      if (onClick) {
        onClick(date);
      }
    }
  }, {
    key: '_onMouseMove',
    value: function _onMouseMove(e) {
      e.preventDefault();
      var _props2 = this.props,
          date = _props2.date,
          onMouseMove = _props2.onMouseMove;

      if (onMouseMove) {
        onMouseMove(date);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props3 = this.props,
          date = _props3.date,
          className = _props3.className,
          blockClassName = _props3.blockClassName;

      return _react2.default.createElement(
        'div',
        {
          className: (0, _classnames2.default)(blockClassName + '-day', className),
          onClick: this._onClick.bind(this),
          onMouseMove: this._onMouseMove.bind(this)
        },
        (0, _format2.default)(date, 'D')
      );
    }
  }]);

  return Day;
}(_react2.default.Component);

Day.propTypes = {
  blockClassName: _propTypes2.default.string,
  className: _propTypes2.default.string,
  date: _lib.datePropType.isRequired,
  onClick: _propTypes2.default.func,
  onMouseMove: _propTypes2.default.func,
  today: _lib.datePropType.isRequired
};
Day.defaultProps = {
  blockClassName: _consts.BLOCK_CLASS_NAME
};
exports.default = Day;
module.exports = exports['default'];