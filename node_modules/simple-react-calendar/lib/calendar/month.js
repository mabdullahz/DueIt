'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _week = require('./week');

var _week2 = _interopRequireDefault(_week);

var _days_of_week = require('./days_of_week');

var _days_of_week2 = _interopRequireDefault(_days_of_week);

var _consts = require('./consts');

var _lib = require('./_lib');

var _start_of_week = require('date-fns/start_of_week');

var _start_of_week2 = _interopRequireDefault(_start_of_week);

var _end_of_week = require('date-fns/end_of_week');

var _end_of_week2 = _interopRequireDefault(_end_of_week);

var _are_ranges_overlapping = require('date-fns/are_ranges_overlapping');

var _are_ranges_overlapping2 = _interopRequireDefault(_are_ranges_overlapping);

var _start_of_month = require('date-fns/start_of_month');

var _start_of_month2 = _interopRequireDefault(_start_of_month);

var _end_of_month = require('date-fns/end_of_month');

var _end_of_month2 = _interopRequireDefault(_end_of_month);

var _is_before = require('date-fns/is_before');

var _is_before2 = _interopRequireDefault(_is_before);

var _is_equal = require('date-fns/is_equal');

var _is_equal2 = _interopRequireDefault(_is_equal);

var _add_days = require('date-fns/add_days');

var _add_days2 = _interopRequireDefault(_add_days);

var _sub_days = require('date-fns/sub_days');

var _sub_days2 = _interopRequireDefault(_sub_days);

var _is_same_day = require('date-fns/is_same_day');

var _is_same_day2 = _interopRequireDefault(_is_same_day);

var _difference_in_calendar_days = require('date-fns/difference_in_calendar_days');

var _difference_in_calendar_days2 = _interopRequireDefault(_difference_in_calendar_days);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SINGLE_MODE = 'single';
var RANGE_MODE = 'range';

var Month = function (_React$Component) {
  _inherits(Month, _React$Component);

  function Month() {
    _classCallCheck(this, Month);

    return _possibleConstructorReturn(this, (Month.__proto__ || Object.getPrototypeOf(Month)).apply(this, arguments));
  }

  _createClass(Month, [{
    key: '_pushUpdate',
    value: function _pushUpdate() {
      var _props = this.props,
          onChange = _props.onChange,
          rangeLimit = _props.rangeLimit;

      var start = void 0,
          end = void 0;

      if (this._selectionStart && this._selectionEnd) {
        if ((0, _is_before2.default)(this._selectionStart, this._selectionEnd)) {
          start = this._selectionStart;
          end = this._selectionEnd;
        } else {
          start = this._selectionEnd;
          end = this._selectionStart;
        }

        if (rangeLimit && rangeLimit < (0, _difference_in_calendar_days2.default)(end, start)) {
          end = (0, _add_days2.default)(start, rangeLimit);
        }
      }

      return onChange({
        start: start,
        end: end,
        inProgress: this._selectionInProgress
      });
    }
  }, {
    key: '_pushNoticeUpdate',
    value: function _pushNoticeUpdate(noticeType) {
      var onNoticeChange = this.props.onNoticeChange;

      return onNoticeChange(noticeType);
    }
  }, {
    key: '_getDisabledRange',
    value: function _getDisabledRange(interval) {
      var start = interval.start,
          end = interval.end;
      var disabledIntervals = this.props.disabledIntervals;


      if (!disabledIntervals) return true;

      for (var i = 0; i < disabledIntervals.length; i++) {
        var _disabledIntervals$i = disabledIntervals[i],
            intervalStart = _disabledIntervals$i.start,
            intervalEnd = _disabledIntervals$i.end;


        if ((0, _are_ranges_overlapping2.default)(start, end, intervalStart, intervalEnd)) {
          return;
        }
      }

      return true;
    }
  }, {
    key: '_onDayMouseMove',
    value: function _onDayMouseMove(date) {
      var onDayHover = this.props.onDayHover;

      if (onDayHover) {
        onDayHover(date);
      }

      if (!this._selectionInProgress) return;

      var _props2 = this.props,
          rangeLimit = _props2.rangeLimit,
          disabledIntervals = _props2.disabledIntervals;

      var dateLimit = (0, _sub_days2.default)(this._selectionStart, rangeLimit);

      var isDisabledWithin = this._getDisabledRange({
        start: (0, _is_before2.default)(this._selectionStart, date) ? this._selectionStart : date,
        end: !(0, _is_before2.default)(this._selectionStart, date) ? this._selectionStart : date
      });

      if (!isDisabledWithin) {
        return;
      }

      if (!(0, _is_equal2.default)(date, this._selectionEnd)) {
        if (!rangeLimit || rangeLimit && !(0, _is_before2.default)(date, dateLimit)) {
          this._selectionEnd = date;
          this._pushUpdate();
        }
      }
    }
  }, {
    key: '_onDayClick',
    value: function _onDayClick(date) {
      var mode = this.props.mode;


      if (mode === RANGE_MODE) {
        if (this._selectionInProgress) {
          var isDisabledWithin = this._getDisabledRange({
            start: (0, _is_before2.default)(this._selectionStart, date) ? this._selectionStart : date,
            end: !(0, _is_before2.default)(this._selectionStart, date) ? this._selectionStart : date
          });

          if (!isDisabledWithin) {
            this._selectionInProgress = false;
            this._selectionStart = null;
            this._selectionEnd = null;
            this._pushUpdate();
            this._pushNoticeUpdate('overlapping_with_disabled');
            return;
          }

          this._selectionInProgress = false;
          this._selectionEnd = date;
        } else {
          this._selectionInProgress = true;
          this._selectionStart = date;
          this._selectionEnd = date;
        }
      } else if (mode === SINGLE_MODE) {
        this._selectionInProgress = false;
        this._selectionStart = date;
        this._selectionEnd = date;
      } else {
        return;
      }

      this._pushUpdate();
      this._pushNoticeUpdate(null);
    }
  }, {
    key: '_onDisabledDayClick',
    value: function _onDisabledDayClick() {
      var onNoticeChange = this.props.onNoticeChange;

      onNoticeChange('disabled_day_click');
    }
  }, {
    key: '_getMinDate',
    value: function _getMinDate() {
      var _props3 = this.props,
          rangeLimit = _props3.rangeLimit,
          minDate = _props3.minDate;

      var calcStartDate = (0, _sub_days2.default)(this._selectionStart, rangeLimit);

      if (minDate) {
        var isCalcStartDayAfter = (0, _is_before2.default)(minDate, calcStartDate);
        return isCalcStartDayAfter ? calcStartDate : minDate;
      } else {
        return calcStartDate;
      }
    }
  }, {
    key: '_getMaxDate',
    value: function _getMaxDate() {
      var _props4 = this.props,
          rangeLimit = _props4.rangeLimit,
          maxDate = _props4.maxDate;

      var calcEndDate = (0, _add_days2.default)(this._selectionStart, rangeLimit);

      if (maxDate) {
        var isCalcEndDayBefore = (0, _is_before2.default)(calcEndDate, maxDate);
        return isCalcEndDayBefore ? calcEndDate : maxDate;
      } else {
        return calcEndDate;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var blockClassName = this.props.blockClassName;

      return _react2.default.createElement(
        'div',
        { className: blockClassName + '-month' },
        this._renderWeekDays(),
        this._renderWeeks()
      );
    }
  }, {
    key: '_renderWeekDays',
    value: function _renderWeekDays() {
      var _props5 = this.props,
          blockClassName = _props5.blockClassName,
          disableDaysOfWeek = _props5.disableDaysOfWeek,
          weekStartsOn = _props5.weekStartsOn;

      if (disableDaysOfWeek) return null;

      return _react2.default.createElement(_days_of_week2.default, { blockClassName: blockClassName, weekStartsOn: weekStartsOn });
    }
  }, {
    key: '_renderWeeks',
    value: function _renderWeeks() {
      var _this2 = this;

      var _props6 = this.props,
          selectedMin = _props6.selectedMin,
          selectedMax = _props6.selectedMax,
          highlightedStart = _props6.highlightedStart,
          highlightedEnd = _props6.highlightedEnd,
          disabledIntervals = _props6.disabledIntervals,
          activeMonth = _props6.activeMonth,
          today = _props6.today,
          blockClassName = _props6.blockClassName,
          minNumberOfWeeks = _props6.minNumberOfWeeks,
          rangeLimit = _props6.rangeLimit,
          onDayHover = _props6.onDayHover,
          weekStartsOn = _props6.weekStartsOn;

      var weeks = [];
      var _props7 = this.props,
          minDate = _props7.minDate,
          maxDate = _props7.maxDate;

      var date = (0, _start_of_week2.default)((0, _start_of_month2.default)(activeMonth), { weekStartsOn: weekStartsOn });
      var end = (0, _end_of_week2.default)((0, _end_of_month2.default)(activeMonth), { weekStartsOn: weekStartsOn });

      if (this._selectionInProgress && rangeLimit) {
        minDate = this._getMinDate();
        maxDate = this._getMaxDate();
      }

      while (typeof minNumberOfWeeks == 'number' && minNumberOfWeeks > weeks.length || (0, _is_before2.default)(date, end) || (0, _is_same_day2.default)(date, end)) {
        weeks.push(date);
        date = (0, _add_days2.default)(date, 7);
      }

      return weeks.map(function (week) {
        return _react2.default.createElement(_week2.default, {
          key: week.getTime(),
          date: week,
          minDate: minDate,
          maxDate: maxDate,
          selectedMin: selectedMin,
          selectedMax: selectedMax,
          highlightedStart: highlightedStart,
          highlightedEnd: highlightedEnd,
          disabledIntervals: disabledIntervals,
          activeMonth: activeMonth,
          onDayHover: onDayHover,
          onDayClick: _this2._onDayClick.bind(_this2),
          onDisabledDayClick: _this2._onDisabledDayClick.bind(_this2),
          onDayMouseMove: _this2._onDayMouseMove.bind(_this2),
          today: today,
          blockClassName: blockClassName,
          weekStartsOn: weekStartsOn
        });
      });
    }
  }]);

  return Month;
}(_react2.default.Component);

Month.propTypes = {
  activeMonth: _lib.datePropType.isRequired,
  blockClassName: _propTypes2.default.string,
  disableDaysOfWeek: _propTypes2.default.bool,
  disabledIntervals: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    start: _lib.datePropType.isRequired,
    end: _lib.datePropType.isRequired
  })),
  highlightedEnd: _lib.datePropType,
  highlightedStart: _lib.datePropType,
  maxDate: _lib.datePropType,
  minDate: _lib.datePropType,
  minNumberOfWeeks: _propTypes2.default.number,
  mode: _propTypes2.default.string.isRequired,
  onChange: _propTypes2.default.func.isRequired,
  onDayHover: _propTypes2.default.func,
  onNoticeChange: _propTypes2.default.func.isRequired,
  rangeLimit: _propTypes2.default.number,
  selectedMax: _lib.datePropType,
  selectedMin: _lib.datePropType,
  today: _lib.datePropType.isRequired,
  weekStartsOn: _propTypes2.default.oneOf(_consts.DAYS_IN_WEEK)
};
Month.defaultProps = {
  blockClassName: _consts.BLOCK_CLASS_NAME
};
exports.default = Month;
module.exports = exports['default'];