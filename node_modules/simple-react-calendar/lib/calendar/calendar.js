'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _month = require('./month');

var _month2 = _interopRequireDefault(_month);

var _month_header = require('./month_header');

var _month_header2 = _interopRequireDefault(_month_header);

var _notice = require('./notice');

var _notice2 = _interopRequireDefault(_notice);

var _consts = require('./consts');

var _lib = require('./_lib');

var _start_of_month = require('date-fns/start_of_month');

var _start_of_month2 = _interopRequireDefault(_start_of_month);

var _is_same_month = require('date-fns/is_same_month');

var _is_same_month2 = _interopRequireDefault(_is_same_month);

var _is_valid = require('date-fns/is_valid');

var _is_valid2 = _interopRequireDefault(_is_valid);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var SINGLE_MODE = 'single';
var RANGE_MODE = 'range';

var isValid = function isValid(date) {
  try {
    return (0, _is_valid2.default)(date);
  } catch (e) {
    return false;
  }
};

var Calendar = function (_React$Component) {
  _inherits(Calendar, _React$Component);

  function Calendar(props) {
    _classCallCheck(this, Calendar);

    var _this = _possibleConstructorReturn(this, (Calendar.__proto__ || Object.getPrototypeOf(Calendar)).call(this, props));

    _this.state = {
      activeMonth: _this._initialMonth(props),
      selection: null,
      shownNoticeType: null
    };
    return _this;
  }

  _createClass(Calendar, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.activeMonth && !(0, _is_same_month2.default)(nextProps.activeMonth, this.props.activeMonth)) {
        this.setState({ activeMonth: (0, _start_of_month2.default)(nextProps.activeMonth) });
      }
    }
  }, {
    key: '_initialMonth',
    value: function _initialMonth(props) {
      var _ref = props || this.props,
          selected = _ref.selected,
          activeMonth = _ref.activeMonth,
          mode = _ref.mode,
          today = _ref.today;

      if (isValid(activeMonth)) {
        return activeMonth;
      } else {
        if (selected) {
          var selectionStart = mode === SINGLE_MODE ? selected : selected.start;
          if (isValid(selectionStart)) {
            return (0, _start_of_month2.default)(selectionStart);
          }
        }
      }
      return (0, _start_of_month2.default)(today || new Date());
    }
  }, {
    key: '_switchMonth',
    value: function _switchMonth(date) {
      var onMonthChange = this.props.onMonthChange;

      if (typeof onMonthChange === 'function') {
        onMonthChange(date);
      } else {
        this.setState({
          activeMonth: date
        });
      }
    }
  }, {
    key: '_activeMonth',
    value: function _activeMonth() {
      var _props = this.props,
          onMonthChange = _props.onMonthChange,
          activeMonth = _props.activeMonth;

      if (onMonthChange) {
        return activeMonth;
      } else {
        return this.state.activeMonth;
      }
    }
  }, {
    key: '_highlight',
    value: function _highlight() {
      var highlighted = this.props.highlighted;

      if (!highlighted) return { start: null, end: null };

      var start = highlighted.start,
          end = highlighted.end;


      if (isValid(start) && isValid(end)) {
        return { start: start, end: end };
      } else {
        return { start: null, end: null };
      }
    }
  }, {
    key: '_selection',
    value: function _selection() {
      var start = this._selectionStart();
      var end = this._selectionEnd();

      if (isValid(start) && isValid(end)) {
        return { start: start, end: end };
      } else {
        return { start: null, end: null };
      }
    }
  }, {
    key: '_selectionStart',
    value: function _selectionStart() {
      return this._selectionDate('start');
    }
  }, {
    key: '_selectionEnd',
    value: function _selectionEnd() {
      return this._selectionDate('end');
    }
  }, {
    key: '_selectionDate',
    value: function _selectionDate(dateType) {
      var _props2 = this.props,
          selected = _props2.selected,
          onSelectionProgress = _props2.onSelectionProgress;
      var selection = this.state.selection;


      switch (this.props.mode) {
        case SINGLE_MODE:
          return selected;

        case RANGE_MODE:
          if (!onSelectionProgress && selection) {
            return selection[dateType];
          } else {
            return selected && selected[dateType];
          }
      }
    }
  }, {
    key: '_selectionChanged',
    value: function _selectionChanged(selection) {
      var start = selection.start,
          end = selection.end,
          inProgress = selection.inProgress;
      var _props3 = this.props,
          mode = _props3.mode,
          onSelect = _props3.onSelect,
          onSelectionProgress = _props3.onSelectionProgress;


      if (onSelect && start && (mode !== RANGE_MODE || !inProgress)) {
        onSelect(mode === SINGLE_MODE ? start : { start: start, end: end });
      }

      if (mode === RANGE_MODE) {
        if (onSelectionProgress) {
          onSelectionProgress(selection);
        } else {
          this.setState({ selection: inProgress ? { start: start, end: end } : null });
        }
      }
    }
  }, {
    key: '_noticeChanged',
    value: function _noticeChanged(shownNoticeType) {
      this.setState({ shownNoticeType: shownNoticeType });
    }
  }, {
    key: '_today',
    value: function _today() {
      return this.props.today || new Date();
    }
  }, {
    key: 'render',
    value: function render() {
      var _props4 = this.props,
          blockClassName = _props4.blockClassName,
          disableDaysOfWeek = _props4.disableDaysOfWeek,
          headerNextArrow = _props4.headerNextArrow,
          headerNextTitle = _props4.headerNextTitle,
          headerPrevArrow = _props4.headerPrevArrow,
          headerPrevTitle = _props4.headerPrevTitle,
          highlighted = _props4.highlighted,
          maxDate = _props4.maxDate,
          minDate = _props4.minDate,
          minNumberOfWeeks = _props4.minNumberOfWeeks,
          mode = _props4.mode,
          onDayHover = _props4.onDayHover,
          disabledIntervals = _props4.disabledIntervals,
          rangeLimit = _props4.rangeLimit,
          weekStartsOn = _props4.weekStartsOn;

      var selection = this._selection();
      var highlight = this._highlight();
      var MonthHeaderComponent = this.props.MonthHeaderComponent || _month_header2.default;

      return _react2.default.createElement(
        'div',
        { className: blockClassName },
        this._renderNotice(),
        _react2.default.createElement(MonthHeaderComponent, {
          ref: 'header',
          minDate: minDate,
          maxDate: maxDate,
          headerPrevArrow: headerPrevArrow,
          headerPrevTitle: headerPrevTitle,
          headerNextArrow: headerNextArrow,
          headerNextTitle: headerNextTitle,
          activeMonth: this._activeMonth(),
          onMonthChange: this._switchMonth.bind(this),
          blockClassName: blockClassName
        }),
        _react2.default.createElement(_month2.default, {
          mode: mode,
          minDate: minDate,
          maxDate: maxDate,
          minNumberOfWeeks: minNumberOfWeeks,
          rangeLimit: rangeLimit,
          today: this._today(),
          ref: 'month',
          activeMonth: this._activeMonth(),
          selectedMin: selection.start,
          selectedMax: selection.end,
          disableDaysOfWeek: disableDaysOfWeek,
          onDayHover: onDayHover,
          highlightedStart: highlight.start,
          highlightedEnd: highlight.end,
          onChange: this._selectionChanged.bind(this),
          onNoticeChange: this._noticeChanged.bind(this),
          blockClassName: blockClassName,
          disabledIntervals: disabledIntervals,
          weekStartsOn: weekStartsOn
        })
      );
    }
  }, {
    key: '_renderNotice',
    value: function _renderNotice() {
      var shownNoticeType = this.state.shownNoticeType;
      var blockClassName = this.props.blockClassName;

      var NoticeComponent = this.props.NoticeComponent || _notice2.default;

      return shownNoticeType && _react2.default.createElement(NoticeComponent, { blockClassName: blockClassName, type: shownNoticeType });
    }
  }]);

  return Calendar;
}(_react2.default.Component);

Calendar.propTypes = {
  MonthHeaderComponent: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
  NoticeComponent: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.func]),
  activeMonth: _lib.datePropType,
  blockClassName: _propTypes2.default.string,
  disableDaysOfWeek: _propTypes2.default.bool,
  disabledIntervals: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    start: _lib.datePropType.isRequired,
    end: _lib.datePropType.isRequired
  })),
  headerNextArrow: _propTypes2.default.element,
  headerNextTitle: _propTypes2.default.string,
  headerPrevArrow: _propTypes2.default.element,
  headerPrevTitle: _propTypes2.default.string,
  highlighted: _propTypes2.default.shape({
    start: _lib.datePropType.isRequired,
    end: _lib.datePropType.isRequired
  }),
  maxDate: _lib.datePropType,
  minDate: _lib.datePropType,
  minNumberOfWeeks: _propTypes2.default.number,
  mode: _propTypes2.default.oneOf([SINGLE_MODE, RANGE_MODE]),
  onDayHover: _propTypes2.default.func,
  onMonthChange: _propTypes2.default.func,
  onSelect: _propTypes2.default.func,
  onSelectionProgress: _propTypes2.default.func,
  rangeLimit: _propTypes2.default.number,
  selected: _propTypes2.default.oneOfType([_lib.datePropType, _propTypes2.default.shape({
    start: _lib.datePropType.isRequired,
    end: _lib.datePropType.isRequired,
    inProgress: _propTypes2.default.bool
  })]),
  today: _lib.datePropType,
  weekStartsOn: _propTypes2.default.oneOf(_consts.DAYS_IN_WEEK)
};
Calendar.defaultProps = {
  weekStartsOn: 1,
  mode: SINGLE_MODE,
  blockClassName: _consts.BLOCK_CLASS_NAME
};
exports.default = Calendar;
module.exports = exports['default'];