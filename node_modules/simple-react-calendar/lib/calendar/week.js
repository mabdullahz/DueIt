'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames2 = require('classnames');

var _classnames3 = _interopRequireDefault(_classnames2);

var _day = require('./day');

var _day2 = _interopRequireDefault(_day);

var _consts = require('./consts');

var _lib = require('./_lib');

var _each_day = require('date-fns/each_day');

var _each_day2 = _interopRequireDefault(_each_day);

var _start_of_day = require('date-fns/start_of_day');

var _start_of_day2 = _interopRequireDefault(_start_of_day);

var _start_of_week = require('date-fns/start_of_week');

var _start_of_week2 = _interopRequireDefault(_start_of_week);

var _end_of_week = require('date-fns/end_of_week');

var _end_of_week2 = _interopRequireDefault(_end_of_week);

var _is_within_range = require('date-fns/is_within_range');

var _is_within_range2 = _interopRequireDefault(_is_within_range);

var _format = require('date-fns/format');

var _format2 = _interopRequireDefault(_format);

var _is_before = require('date-fns/is_before');

var _is_before2 = _interopRequireDefault(_is_before);

var _is_after = require('date-fns/is_after');

var _is_after2 = _interopRequireDefault(_is_after);

var _is_equal = require('date-fns/is_equal');

var _is_equal2 = _interopRequireDefault(_is_equal);

var _is_weekend = require('date-fns/is_weekend');

var _is_weekend2 = _interopRequireDefault(_is_weekend);

var _is_same_day = require('date-fns/is_same_day');

var _is_same_day2 = _interopRequireDefault(_is_same_day);

var _is_same_month = require('date-fns/is_same_month');

var _is_same_month2 = _interopRequireDefault(_is_same_month);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Week = function (_React$Component) {
  _inherits(Week, _React$Component);

  function Week() {
    _classCallCheck(this, Week);

    return _possibleConstructorReturn(this, (Week.__proto__ || Object.getPrototypeOf(Week)).apply(this, arguments));
  }

  _createClass(Week, [{
    key: '_dateSelectable',
    value: function _dateSelectable(date) {
      var _props = this.props,
          minDate = _props.minDate,
          maxDate = _props.maxDate;


      if (this._dateDisabled(date)) {
        return false;
      }

      if (minDate && maxDate) {
        return (0, _is_within_range2.default)(date, minDate, maxDate);
      } else if (minDate && !maxDate) {
        return (0, _is_after2.default)(date, minDate) || (0, _is_equal2.default)(date, minDate);
      } else if (maxDate && !minDate) {
        return (0, _is_before2.default)(date, maxDate) || (0, _is_equal2.default)(date, maxDate);
      } else {
        return true;
      }
    }
  }, {
    key: '_dateSelected',
    value: function _dateSelected(date) {
      var _props2 = this.props,
          selectedMin = _props2.selectedMin,
          selectedMax = _props2.selectedMax;

      return selectedMin && selectedMax && (0, _is_within_range2.default)((0, _start_of_day2.default)(date), (0, _start_of_day2.default)(selectedMin), (0, _start_of_day2.default)(selectedMax));
    }
  }, {
    key: '_dateHighlighted',
    value: function _dateHighlighted(date) {
      var _props3 = this.props,
          highlightedStart = _props3.highlightedStart,
          highlightedEnd = _props3.highlightedEnd;

      if (!highlightedStart || !highlightedEnd) return false;

      return (0, _is_within_range2.default)((0, _start_of_day2.default)(date), (0, _start_of_day2.default)(highlightedStart), (0, _start_of_day2.default)(highlightedEnd));
    }
  }, {
    key: '_dateDisabled',
    value: function _dateDisabled(date) {
      var dateDisabled = void 0;
      var disabledIntervals = this.props.disabledIntervals;

      if (!disabledIntervals) return false;

      for (var i = 0; i < disabledIntervals.length; i++) {
        var _disabledIntervals$i = disabledIntervals[i],
            start = _disabledIntervals$i.start,
            end = _disabledIntervals$i.end;


        dateDisabled = (0, _is_within_range2.default)((0, _start_of_day2.default)(date), (0, _start_of_day2.default)(start), (0, _start_of_day2.default)(end));

        if (dateDisabled) {
          return dateDisabled;
        }
      }

      return false;
    }
  }, {
    key: '_dateClasses',
    value: function _dateClasses(date) {
      var _classnames;

      var _props4 = this.props,
          today = _props4.today,
          activeMonth = _props4.activeMonth,
          selectedMax = _props4.selectedMax,
          selectedMin = _props4.selectedMin;


      return (0, _classnames3.default)((_classnames = {
        'is-selected': this._dateSelected(date),
        'is-highlighted': this._dateHighlighted(date),
        'is-disabled': this._dateDisabled(date),
        'is-today': (0, _is_same_day2.default)(today, date),
        'is-current_month': (0, _is_same_month2.default)(date, activeMonth),
        'is-start_selection': selectedMin && (0, _is_same_day2.default)(selectedMin, date),
        'is-end_selection': selectedMax && (0, _is_same_day2.default)(selectedMax, date),
        'is-prev_month': date.getMonth() !== activeMonth.getMonth() && (0, _is_before2.default)(date, activeMonth),
        'is-next_month': date.getMonth() !== activeMonth.getMonth() && (0, _is_after2.default)(date, activeMonth)
      }, _defineProperty(_classnames, (0, _is_weekend2.default)(date) ? 'is-weekend' : 'is-working_day', true), _defineProperty(_classnames, this._dateSelectable(date) ? 'is-selectable' : 'is-not_selectable', true), _classnames));
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        'div',
        { className: this.props.blockClassName + '-week' },
        this._renderDays()
      );
    }
  }, {
    key: '_renderDays',
    value: function _renderDays() {
      var _this2 = this;

      var _props5 = this.props,
          date = _props5.date,
          today = _props5.today,
          onDayClick = _props5.onDayClick,
          onDisabledDayClick = _props5.onDisabledDayClick,
          onDayMouseMove = _props5.onDayMouseMove,
          blockClassName = _props5.blockClassName,
          weekStartsOn = _props5.weekStartsOn;

      var start = (0, _start_of_week2.default)(date, { weekStartsOn: weekStartsOn });
      var end = (0, _end_of_week2.default)(date, { weekStartsOn: weekStartsOn });
      return (0, _each_day2.default)(start, end).map(function (day) {
        var data = _this2.props.data[(0, _format2.default)(day, 'YYYY-MM-DD')];
        var selectable = _this2._dateSelectable(day);
        var disabled = _this2._dateDisabled(day);

        var onClick = void 0;
        if (selectable) {
          onClick = onDayClick;
        } else if (disabled) {
          onClick = onDisabledDayClick;
        }

        return _react2.default.createElement(_day2.default, {
          blockClassName: blockClassName,
          key: day.getTime(),
          date: day,
          data: data,
          className: _this2._dateClasses(day, data),
          today: today,
          onClick: onClick,
          onMouseMove: selectable ? onDayMouseMove : null
        });
      });
    }
  }]);

  return Week;
}(_react2.default.Component);

Week.propTypes = {
  activeMonth: _lib.datePropType.isRequired,
  blockClassName: _propTypes2.default.string,
  data: _propTypes2.default.object,
  date: _lib.datePropType.isRequired,
  disabledIntervals: _propTypes2.default.arrayOf(_propTypes2.default.shape({
    start: _lib.datePropType.isRequired,
    end: _lib.datePropType.isRequired
  })),
  highlightedEnd: _lib.datePropType,
  highlightedStart: _lib.datePropType,
  maxDate: _lib.datePropType,
  minDate: _lib.datePropType,
  onDayClick: _propTypes2.default.func.isRequired,
  onDayMouseMove: _propTypes2.default.func.isRequired,
  onDisabledDayClick: _propTypes2.default.func.isRequired,
  selectedMax: _lib.datePropType,
  selectedMin: _lib.datePropType,
  today: _lib.datePropType.isRequired,
  weekStartsOn: _propTypes2.default.oneOf(_consts.DAYS_IN_WEEK)
};
Week.defaultProps = {
  data: {},
  blockClassName: _consts.BLOCK_CLASS_NAME
};
exports.default = Week;
module.exports = exports['default'];