'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _consts = require('./consts');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var daysOfWeek = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];

var DaysOfWeek = function (_React$Component) {
  _inherits(DaysOfWeek, _React$Component);

  function DaysOfWeek() {
    _classCallCheck(this, DaysOfWeek);

    return _possibleConstructorReturn(this, (DaysOfWeek.__proto__ || Object.getPrototypeOf(DaysOfWeek)).apply(this, arguments));
  }

  _createClass(DaysOfWeek, [{
    key: '_getDaysOfWeek',
    value: function _getDaysOfWeek(day) {
      return daysOfWeek.slice(day - 1).concat(daysOfWeek.slice(0, day - 1));
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          blockClassName = _props.blockClassName,
          weekStartsOn = _props.weekStartsOn;

      var slicedDaysOfWeek = this._getDaysOfWeek(weekStartsOn);

      return _react2.default.createElement(
        'div',
        { className: blockClassName + '-days_of_week' },
        slicedDaysOfWeek.map(function (day, index) {
          return _react2.default.createElement(
            'div',
            {
              className: (0, _classnames2.default)(blockClassName + '-days_of_week_day', {
                'is-weekend': index > 4 }),
              key: day
            },
            day
          );
        })
      );
    }
  }]);

  return DaysOfWeek;
}(_react2.default.Component);

DaysOfWeek.propTypes = {
  blockClassName: _propTypes2.default.string,
  weekStartsOn: _propTypes2.default.oneOf(_consts.DAYS_IN_WEEK)
};
DaysOfWeek.defaultProps = {
  weekStartsOn: 1,
  blockClassName: _consts.BLOCK_CLASS_NAME
};
exports.default = DaysOfWeek;
module.exports = exports['default'];